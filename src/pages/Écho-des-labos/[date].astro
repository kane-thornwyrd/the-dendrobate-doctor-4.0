---
import colors from "@/components/tailwind-colors.json"
import { TitleEmbossed } from "@/components/ui/title-embossed"
import Layout from "@/layouts/Layout.astro"
import { ucFirst } from "@/lib/utils"
import { getCollection, getEntry } from "astro:content"
import { experimental_AstroContainer } from "astro/container"

import KissKissBankBankLink from "../../components/kissKissBankBankLink.astro"

export const DAYS = [
  "dimanche",
  "lundi",
  "mardi",
  "mercredi",
  "jeudi",
  "vendredi",
  "samedi",
]

export const MONTHS = [
  "janvier",
  "février",
  "mars",
  "avril",
  "mai",
  "juin",
  "juillet",
  "août",
  "septembre",
  "octobre",
  "novembre",
  "décembre",
]

export async function getStaticPaths() {
  const edl = await getCollection("edl")
  return edl.map(entry => ({
    params: {
      date: entry.id,
    },
  }))
}

const { date } = Astro.params

export const dateToTitle = (d: string) => {
  //@ts-ignore
  const td: Date = new Date(Date.parse(d.replace(/(\d{4})(\d{2})(\d{2})/, "$1-$2-$3T00:00:00Z")))
  return `${DAYS[td.getDay()]} ${td.getDate()} ${MONTHS[td.getMonth()]} ${td.getFullYear()}`
}

const entry = await getEntry("edl", date)
if (!entry) {
  throw new Error(`Could not find ÉdL "${date}"`)
}

const machineText = (content: string) => content.replace(/ +/gi, "-").replace(/[^a-z-]/gi, "")

const incrHeadings = (_: string, i: string) => `<h${parseInt(i, 10) + 1}`
const headings: string[] = []
const extractHeadings = (_: string, heading: string) => {
  headings.push(`<li><a href="#${machineText(heading)}">${heading}</a></li>`)
  return _
}
const anchorHeadings =
  (machineTranslator: (a: string) => string) => (heading: string, index: number, content: string) => {
    const machineContent = machineTranslator(content)
    return `<h${index} id="${machineContent}">${content}</h${index}>`
  }

type ReplacerFunction = (...params: any[]) => string

type filterConf = [reg: RegExp | string, transformer: ReplacerFunction | string]

const container = await experimental_AstroContainer.create()
const kkbbPicture = await container.renderToString(KissKissBankBankLink)

const contentFilters: filterConf[] = [
  [/\<p\>\s*\*\*\*\<\/p\>/gi, ""],
  [
    /(?<link>\<a[^h]+href="[^"]+">[^\<]+\<\/a>\s*)\((?<linkinfo>[^)]+)\)/gi,
    (...params) => {
      const { link, linkinfo } = params.pop()
      return link
    },
  ],
  [/\<p\>\s*<\/p\>/gi, ""],
  [/\<h(\d)/gi, incrHeadings],
  [
    /\<img([^\>]+)\>/gi,
    (raw, data) => {
      const srcRegEx = /src="(?<src>[^"]+)"/i
      const altRegEx = /alt="(?<alt>[^"]+)"/i
      const src = data.match(srcRegEx).groups.src
      const alt = data.match(altRegEx)?.groups.alt
      return alt
        ? `<h2>Illustration de la semaine</h2><figure class="drop-shadow-2xl shadow-2xl p-6 border-2 border-emerald-900 bg-neutral-200 dark:shadow-emerald-300">
        <img src="${src}" alt="${alt}">
        <figcaption class="font-bold text-center">${alt}</figcaption>
      </figure>`
        : raw
    },
  ],
  [/\<h\d>([^<]+)<\/h\d>/gi, extractHeadings],
  [/\<h(\d)>([^<]+)<\/h\d>/gi, anchorHeadings(machineText)],
  [
    "KisskissBankbank (https://www.kisskissbankbank.com/fr/projects/the-dendrobate-doctor)",
    kkbbPicture,
  ],
  [
    "<p>Bienvenue à tous sur l’Écho des Labos.</p>",
    () => `<p>Bienvenue à tous sur l’Écho des Labos.</p>
      <div id="toc_container" class="min-w-full">
        <h5 class="toc_title">Index</h5>
        <ol class="toc_list">
        ${headings.join("\n")}
        </ol>
      </div>`,
  ],
]
---

<Layout>
  <TitleEmbossed
    shadowStart={colors.stone[200]}
    shadowEnd={colors.stone[400]}
    className="text-center text-stone-100 pt-10"
    style={{ lineHeight: "0.5" }}
  >
    l'Écho des Labos<br /><small class="text-5xl">{ucFirst(dateToTitle(date))}</small>
  </TitleEmbossed>
  <div
    class="prose
    text-ellipsis
    text-pretty
    dark:prose-invert
    mx-auto
    px-3
    prose-headings:font-light
    prose-headings:border-b-2
    prose-headings:border-t-2
    prose-a:text-emerald-900
    dark:prose-a:text-emerald-400
    prose-headings:border-emerald-900
    prose-headings:text-center
    prose-headings:py-4
    prose-headings:bg-neutral-200
    dark:prose-headings:bg-emerald-900
    dark:prose-headings:shadow-emerald-300
    dark:prose-headings:shadow-md"
  >
    <Fragment
      set:html={contentFilters.reduce(
        (prev: string, current: filterConf) => prev.replace.apply(prev, current as [any, any]),
        entry.data.content
      )}
    />
  </div>
</Layout>
